webpackJsonp([1],{

/***/ 203:
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(261)\n}\nvar Component = __webpack_require__(8)(\n  /* script */\n  __webpack_require__(210),\n  /* template */\n  __webpack_require__(253),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-98168054\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"F:\\\\projects\\\\vue-croppa\\\\docs\\\\src\\\\pages\\\\index.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] index.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-98168054\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-98168054\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaW5kZXgudnVlPzc1YzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EseUJBQTZMO0FBQzdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjAzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05ODE2ODA1NFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc3R5bHVzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2luZGV4LnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vaW5kZXgudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi05ODE2ODA1NFxcXCJ9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9pbmRleC52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBcImRhdGEtdi05ODE2ODA1NFwiLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJGOlxcXFxwcm9qZWN0c1xcXFx2dWUtY3JvcHBhXFxcXGRvY3NcXFxcc3JjXFxcXHBhZ2VzXFxcXGluZGV4LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gaW5kZXgudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTk4MTY4MDU0XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtOTgxNjgwNTRcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wYWdlcy9pbmRleC52dWVcbi8vIG1vZHVsZSBpZCA9IDIwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 210:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(225);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\n\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      myCroppa: {},\n      width: 350,\n      height: 350,\n      canvasColor: '',\n      placeholder: 'Choose an image',\n      placeholderFontSize: 0,\n      placeholderColor: '',\n      disabled: false,\n      preventWhiteSpace: false,\n      disablePinchToZoom: false,\n      reverseScrollToZoom: false,\n      showRemoveButton: true,\n      removeButtonColor: 'red',\n      removeButtonSize: 0,\n      withInitialImage: false,\n      initialImageSrc: 'https://zhanziyang.github.io/vue-croppa/static/initial-image.png'\n    };\n  },\n\n\n  computed: {\n    code: function code() {\n      return '<!-- Sync with your customizations above! -->\\n<croppa v-model=\"myCroppa\"\\n        :width=\"' + this.width + '\"\\n        :height=\"' + this.height + '\"\\n        canvas-color=\"' + this.canvasColor + '\"\\n        placeholder=\"' + this.placeholder + '\"\\n        :placeholder-font-size=\"' + this.placeholderFontSize + '\"\\n        placeholder-color=\"' + this.placeholderColor + '\"\\n        :disabled=\"' + this.disabled + '\"\\n        :prevent-white-space=\"' + this.preventWhiteSpace + '\"\\n        :reverse-scroll-to-zoom=\"' + this.reverseScrollToZoom + '\"\\n        :show-remove-button=\"' + this.showRemoveButton + '\"\\n        remove-button-color=\"' + this.removeButtonColor + '\"\\n        :remove-button-size=\"' + this.removeButtonSize + '\"\\n        @file-choose=\"handleCroppaFileChoose\"\\n        @file-size-exceed=\"handleCroppaFileSizeExceed\"\\n        @file-type-mismatch=\"handleCroppaFileTypeMismatch\"\\n        @image-remove=\"handleImageRemove\"\\n        @move=\"handleCroppaMove\"\\n        @zoom=\"handleCroppaZoom\">  ' + (this.withInitialImage ? '\\n  <img crossOrigin=\"anonymous\"\\n       src=\"' + this.initialImageSrc + '\"\\n       slot=\"initial\">' : '') + '\\n</croppa > ';\n    }\n  },\n\n  beforeMount: function beforeMount() {\n    var windowWidth = window.innerWidth;\n    if (windowWidth < 400) {\n      this.width = 250;\n      this.height = 250;\n    }\n  },\n  mounted: function mounted() {\n    this.preload('https://zhanziyang.github.io/vue-croppa/static/initial-image.png');\n    this.preload('https://unsplash.it/400/400');\n    this.preload('https://unsplash.it/600/500');\n  },\n\n\n  watch: {\n    withInitialImage: function withInitialImage() {\n      this.refresh();\n    },\n    initialImageSrc: function initialImageSrc() {\n      this.refresh();\n    }\n  },\n\n  methods: {\n    preload: function preload(src) {\n      new Image().src = src;\n    },\n    getDataUrl: function getDataUrl() {\n      alert(this.myCroppa.generateDataUrl());\n    },\n    printBlob: function () {\n      var _ref = _asyncToGenerator(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee() {\n        var blob;\n        return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.myCroppa.promisedBlob();\n\n              case 2:\n                blob = _context.sent;\n\n                console.log(blob);\n\n              case 4:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function printBlob() {\n        return _ref.apply(this, arguments);\n      }\n\n      return printBlob;\n    }(),\n    refresh: function refresh() {\n      this.myCroppa.refresh();\n    },\n    remove: function remove() {\n      this.myCroppa.remove();\n    },\n    zoomIn: function zoomIn() {\n      this.myCroppa.zoomIn();\n    },\n    chooseFile: function chooseFile() {\n      this.myCroppa.chooseFile();\n    },\n    moveUp: function moveUp() {\n      this.myCroppa.moveUpwards(5);\n    },\n    handleCroppaInit: function handleCroppaInit() {\n      console.log('init');\n    },\n    handleCroppaFileChoose: function handleCroppaFileChoose(file) {\n      console.log('file chose');\n      console.log(file);\n    },\n    handleCroppaFileSizeExceed: function handleCroppaFileSizeExceed(file) {\n      console.log('file size exceeded');\n      console.log(file);\n    },\n    handleCroppaFileTypeMismatch: function handleCroppaFileTypeMismatch(file) {\n      console.log('file type mismatch');\n      console.log(file);\n    },\n    handleImageRemove: function handleImageRemove() {\n      console.log('image removed');\n    },\n    handleCroppaMove: function handleCroppaMove() {\n      console.log('moved');\n    },\n    handleCroppaZoom: function handleCroppaZoom() {\n      console.log('zoomed');\n    },\n    onInput: function onInput() {\n      console.log('sdjfk');\n    }\n  }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXgudnVlPzcyYzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa1BBO3dCQUVBOztnQkFFQTthQUNBO2NBQ0E7bUJBQ0E7bUJBQ0E7MkJBQ0E7d0JBQ0E7Z0JBQ0E7eUJBQ0E7MEJBQ0E7MkJBQ0E7d0JBQ0E7eUJBQ0E7d0JBQ0E7d0JBQ0E7dUJBRUE7QUFqQkE7QUFtQkE7Ozs7MEJBRUE7QUFHQSxrSEFDQSxzQ0FDQSw0Q0FDQSxnREFDQSwyREFDQSw4REFDQSxtREFDQSxzREFDQSxrRUFDQSxnRUFDQSw2REFDQSw4REFPQSxvVEFFQSwyRUFDQSxnREFHQTtBQUdBO0FBL0JBOztzQ0FnQ0E7NkJBQ0E7MkJBQ0E7bUJBQ0E7b0JBQ0E7QUFDQTtBQUVBOzhCQUNBO2lCQUNBO2lCQUNBO2lCQUNBO0FBRUE7Ozs7a0RBRUE7V0FDQTtBQUNBO2dEQUNBO1dBQ0E7QUFHQTtBQVJBOzs7bUNBVUE7d0JBQ0E7QUFFQTtzQ0FDQTswQkFDQTtBQUVBO0FBQ0E7QUFUQTs7Ozs7OztxQ0FVQTs7Ozs7NEJBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBQ0E7b0JBQ0E7QUFFQTs4QkFDQTtvQkFDQTtBQUVBOzhCQUNBO29CQUNBO0FBRUE7c0NBQ0E7b0JBQ0E7QUFFQTs4QkFDQTtnQ0FDQTtBQUVBO2tEQUNBO2tCQUNBO0FBRUE7a0VBQ0E7a0JBQ0E7a0JBQ0E7QUFFQTswRUFDQTtrQkFDQTtrQkFDQTtBQUVBOzhFQUNBO2tCQUNBO2tCQUNBO0FBRUE7b0RBQ0E7a0JBQ0E7QUFFQTtrREFDQTtrQkFDQTtBQUVBO2tEQUNBO2tCQUNBO0FBRUE7Z0NBQ0E7a0JBQ0E7QUFHQTs7O0FBbEpBIiwiZmlsZSI6IjIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGlkPVwiaW5kZXhcIj5cclxuICAgIDxoMj5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJoZWFkZXJcIj5WdWU8L3NwYW4+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwiaGVhZGVyXCI+Q3JvcHBhPC9zcGFuPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cInN1YmhlYWRlclwiPkEgc2ltcGxlIHN0cmFpZ2h0Zm9yd2FyZCBjdXN0b21pemFibGUgbGlnaHR3ZWlnaHQgbW9iaWxlLWZyaWVuZGx5IGltYWdlIGNyb3BwZXIgZm9yIFZ1ZSAyLjAuPC9zcGFuPlxyXG4gICAgPC9oMj5cclxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXhzLWNlbnRlclwiPlxyXG4gICAgICA8dmlkZW8gY2xhc3M9XCJwb3N0IHZpZGVvLXBvc3RcIlxyXG4gICAgICAgICAgICAgaWQ9XCJ2aWRlby1lbGVtZW50XCJcclxuICAgICAgICAgICAgIGF1dG9wbGF5XHJcbiAgICAgICAgICAgICBsb29wXHJcbiAgICAgICAgICAgICBwb3N0ZXI9XCJodHRwczovL2kuaW1ndXIuY29tL1loV0xncUxoLmpwZ1wiXHJcbiAgICAgICAgICAgICBwcmVsb2FkPVwiYXV0b1wiXHJcbiAgICAgICAgICAgICBtdXRlZD1cIm11dGVkXCJcclxuICAgICAgICAgICAgIHdlYmtpdC1wbGF5c2lubGluZT1cIlwiXHJcbiAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOiA1MjRweDsgaGVpZ2h0OiA0MTMuOTZweDtcIj5cclxuICAgICAgICA8c291cmNlIHR5cGU9XCJ2aWRlby9tcDRcIlxyXG4gICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9pLmltZ3VyLmNvbS92TzFGZ1FNLm1wNFwiPlxyXG4gICAgICA8L3ZpZGVvPlxyXG4gICAgICA8dmlkZW8gY2xhc3M9XCJwb3N0IHZpZGVvLXBvc3RcIlxyXG4gICAgICAgICAgICAgaWQ9XCJ2aWRlby1lbGVtZW50XCJcclxuICAgICAgICAgICAgIGF1dG9wbGF5XHJcbiAgICAgICAgICAgICBsb29wXHJcbiAgICAgICAgICAgICBwb3N0ZXI9XCJodHRwczovL2kuaW1ndXIuY29tL3NKQVFQbzdoLmpwZ1wiXHJcbiAgICAgICAgICAgICBwcmVsb2FkPVwiYXV0b1wiXHJcbiAgICAgICAgICAgICBtdXRlZD1cIm11dGVkXCJcclxuICAgICAgICAgICAgIHdlYmtpdC1wbGF5c2lubGluZT1cIlwiXHJcbiAgICAgICAgICAgICBzdHlsZT1cImhlaWdodDogNDEzLjk2cHg7XCI+XHJcbiAgICAgICAgPHNvdXJjZSB0eXBlPVwidmlkZW8vbXA0XCJcclxuICAgICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vaS5pbWd1ci5jb20vc0pBUVBvNy5tcDRcIj5cclxuICAgICAgPC92aWRlbz5cclxuICBcclxuICAgICAgPGJyPlxyXG4gICAgICA8di1jaGlwIGNsYXNzPVwib3JhbmdlIHdoaXRlLS10ZXh0XCI+XHJcbiAgICAgICAgV2hhdCBZb3UgU2VlIElzIFdoYXQgWW91IEdldFxyXG4gICAgICAgIDx2LWljb24gcmlnaHQ+c3Rhcjwvdi1pY29uPlxyXG4gICAgICA8L3YtY2hpcD5cclxuICAgICAgPHYtY2hpcCBjbGFzcz1cIm9yYW5nZSB3aGl0ZS0tdGV4dFwiPlxyXG4gICAgICAgIDI0a2IgSW4gVG90YWxcclxuICAgICAgICA8di1pY29uIHJpZ2h0PnN0YXI8L3YtaWNvbj5cclxuICAgICAgPC92LWNoaXA+XHJcbiAgICAgIDx2LWNoaXAgY2xhc3M9XCJvcmFuZ2Ugd2hpdGUtLXRleHRcIj5cclxuICAgICAgICBIaWdodGx5IEN1c3RvbWl6YWJsZVxyXG4gICAgICAgIDx2LWljb24gcmlnaHQ+c3Rhcjwvdi1pY29uPlxyXG4gICAgICA8L3YtY2hpcD5cclxuICAgICAgPHYtY2hpcCBjbGFzcz1cIm9yYW5nZSB3aGl0ZS0tdGV4dFwiPlxyXG4gICAgICAgIE1vYmlsZSBGcmllbmRseVxyXG4gICAgICAgIDx2LWljb24gcmlnaHQ+c3Rhcjwvdi1pY29uPlxyXG4gICAgICA8L3YtY2hpcD5cclxuICAgIDwvZGl2PlxyXG4gICAgPGJyPlxyXG4gICAgPHYtY2FyZCBjbGFzcz1cIndoaXRlLS10ZXh0IHRyeS1vdXRcIj5cclxuICAgICAgPHYtY29udGFpbmVyIGZsdWlkXHJcbiAgICAgICAgICAgICAgICAgICBncmlkLWxpc3QtbGc+XHJcbiAgICAgICAgPHYtbGF5b3V0IHJvdy1tZFxyXG4gICAgICAgICAgICAgICAgICBjb2x1bW4+XHJcbiAgICAgICAgICA8di1mbGV4IG1kND5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8cCBjbGFzcz1cInRpcFwiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJoZWFkbGluZSBpY29uZm9udCBpY29uLXBjXCI+IG9uIGNvbXB0dXRlcnM8L2k+XHJcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzdWJoZWFkaW5nXCI+RHJhZyBhbmQgZHJvcCBhIGZpbGU8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwic3ViaGVhZGluZ1wiPkNsaWNrIHRvIGNob29zZSBhIGZpbGU8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwic3ViaGVhZGluZ1wiPkRyYWcgdG8gbW92ZTwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzdWJoZWFkaW5nXCI+U2Nyb2xsIHRvIHpvb208L2xpPlxyXG4gICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICA8YnI+XHJcbiAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0aXBcIj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaGVhZGxpbmUgaWNvbmZvbnQgaWNvbi1tb2JpbGVcIj4gb24gbW9iaWxlIGRldmljZXM8L2k+XHJcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzdWJoZWFkaW5nXCI+VGFiIHRvIGNob29zZSBhIGZpbGU8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwic3ViaGVhZGluZ1wiPkRyYWcgdG8gbW92ZTwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzdWJoZWFkaW5nXCI+UGluY2ggd2l0aCB0d28gZmluZ2VycyB0byB6b29tPC9saT5cclxuICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgICA8di1mbGV4IG1kOD5cclxuICAgICAgICAgICAgPGNyb3BwYSB2LW1vZGVsPVwibXlDcm9wcGFcIlxyXG4gICAgICAgICAgICAgICAgICAgIDp3aWR0aD1cIit3aWR0aFwiXHJcbiAgICAgICAgICAgICAgICAgICAgOmhlaWdodD1cIitoZWlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpjYW52YXMtY29sb3I9XCJjYW52YXNDb2xvclwiXHJcbiAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwicGxhY2Vob2xkZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlci1mb250LXNpemU9XCIrcGxhY2Vob2xkZXJGb250U2l6ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyLWNvbG9yPVwicGxhY2Vob2xkZXJDb2xvclwiXHJcbiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpwcmV2ZW50LXdoaXRlLXNwYWNlPVwicHJldmVudFdoaXRlU3BhY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpyZXZlcnNlLXNjcm9sbC10by16b29tPVwicmV2ZXJzZVNjcm9sbFRvWm9vbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgOnNob3ctcmVtb3ZlLWJ1dHRvbj1cInNob3dSZW1vdmVCdXR0b25cIlxyXG4gICAgICAgICAgICAgICAgICAgIDpyZW1vdmUtYnV0dG9uLWNvbG9yPVwicmVtb3ZlQnV0dG9uQ29sb3JcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpyZW1vdmUtYnV0dG9uLXNpemU9XCIrcmVtb3ZlQnV0dG9uU2l6ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGZpbGUtY2hvb3NlPVwiaGFuZGxlQ3JvcHBhRmlsZUNob29zZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGZpbGUtc2l6ZS1leGNlZWQ9XCJoYW5kbGVDcm9wcGFGaWxlU2l6ZUV4Y2VlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGZpbGUtdHlwZS1taXNtYXRjaD1cImhhbmRsZUNyb3BwYUZpbGVUeXBlTWlzbWF0Y2hcIlxyXG4gICAgICAgICAgICAgICAgICAgIEBpbWFnZS1yZW1vdmU9XCJoYW5kbGVJbWFnZVJlbW92ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgQG1vdmU9XCJoYW5kbGVDcm9wcGFNb3ZlXCJcclxuICAgICAgICAgICAgICAgICAgICBAem9vbT1cImhhbmRsZUNyb3BwYVpvb21cIj5cclxuICAgICAgICAgICAgICA8aW1nIGNyb3NzT3JpZ2luPVwiYW5vbnltb3VzXCJcclxuICAgICAgICAgICAgICAgICAgIDpzcmM9XCJpbml0aWFsSW1hZ2VTcmNcIlxyXG4gICAgICAgICAgICAgICAgICAgc2xvdD1cImluaXRpYWxcIlxyXG4gICAgICAgICAgICAgICAgICAgdi1pZj1cIndpdGhJbml0aWFsSW1hZ2VcIj5cclxuICAgICAgICAgICAgPC9jcm9wcGE+XHJcbiAgICAgICAgICA8L3YtZmxleD5cclxuICAgICAgICA8L3YtbGF5b3V0PlxyXG4gICAgICA8L3YtY29udGFpbmVyPlxyXG4gICAgPC92LWNhcmQ+XHJcbiAgXHJcbiAgICA8YnI+XHJcbiAgICA8di1sYXlvdXQ+XHJcbiAgICAgIDx2LWZsZXggeHMxMlxyXG4gICAgICAgICAgICAgIG9yZGVyLW1kMT5cclxuICAgICAgICA8di1sYXlvdXQgcm93XHJcbiAgICAgICAgICAgICAgICAgIHdyYXA+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di1zbGlkZXIgdi1tb2RlbD1cIndpZHRoXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwid2lkdGhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgdGh1bWItbGFiZWxcclxuICAgICAgICAgICAgICAgICAgICAgIDptYXg9XCI1MDBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOm1pbj1cIjEwMFwiPjwvdi1zbGlkZXI+XHJcbiAgICAgICAgICA8L3YtZmxleD5cclxuICAgICAgICAgIDx2LWZsZXggbWQ0XHJcbiAgICAgICAgICAgICAgICAgIHhzMTI+XHJcbiAgICAgICAgICAgIDx2LXNsaWRlciB2LW1vZGVsPVwiaGVpZ2h0XCJcclxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiaGVpZ2h0XCJcclxuICAgICAgICAgICAgICAgICAgICAgIHRodW1iLWxhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICA6bWF4PVwiNTAwXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDptaW49XCIxMDBcIj48L3Ytc2xpZGVyPlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di1zZWxlY3QgOml0ZW1zPVwiWycnLCAnYmxhY2snLCAnZ3JleScsICcjMDBiY2Q0JywgJ3JnYigyMDUsIDIyMCwgNTcpJ11cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cImNhbnZhc0NvbG9yXCJcclxuICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD1cIm9uSW5wdXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJjYW52YXNDb2xvclwiPjwvdi1zZWxlY3Q+XHJcbiAgICAgICAgICA8L3YtZmxleD5cclxuICAgICAgICA8L3YtbGF5b3V0PlxyXG4gICAgICAgIDx2LWxheW91dCByb3dcclxuICAgICAgICAgICAgICAgICAgd3JhcD5cclxuICAgICAgICAgIDx2LWZsZXggbWQ0XHJcbiAgICAgICAgICAgICAgICAgIHhzMTI+XHJcbiAgICAgICAgICAgIDx2LXN3aXRjaCA6bGFiZWw9XCJgc2V0IGluaXRpYWwgaW1hZ2VgXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJ3aXRoSW5pdGlhbEltYWdlXCI+PC92LXN3aXRjaD5cclxuICAgICAgICAgIDwvdi1mbGV4PlxyXG4gICAgICAgICAgPHYtZmxleCBtZDg+XHJcbiAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbmFtZT1cImluaXRpYWxJbWFnZVNyY1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJpbml0aWFsIGltYWdlIHVybFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cImluaXRpYWxJbWFnZVNyY1wiPjwvdi10ZXh0LWZpZWxkPlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgPC92LWxheW91dD5cclxuICAgICAgICA8di1sYXlvdXQgcm93XHJcbiAgICAgICAgICAgICAgICAgIHdyYXA+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di10ZXh0LWZpZWxkIG5hbWU9XCJwbGFjZWhvbGRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJwbGFjZWhvbGRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInBsYWNlaG9sZGVyXCI+PC92LXRleHQtZmllbGQ+XHJcbiAgICAgICAgICA8L3YtZmxleD5cclxuICAgICAgICAgIDx2LWZsZXggbWQ0XHJcbiAgICAgICAgICAgICAgICAgIHhzMTI+XHJcbiAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbmFtZT1cInBsYWNlaG9sZGVyRm9udFNpemVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwicGxhY2Vob2xkZXJGb250U2l6ZSAocHgpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwicGxhY2Vob2xkZXJGb250U2l6ZVwiPjwvdi10ZXh0LWZpZWxkPlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di1zZWxlY3QgOml0ZW1zPVwiWycnLCAnd2hpdGUnLCAnZ3JleScsICcjZmZjMTA3JywgJ3JnYigwLCAxNTAsIDEzNiknXVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwicGxhY2Vob2xkZXJDb2xvclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cInBsYWNlaG9sZGVyQ29sb3JcIj48L3Ytc2VsZWN0PlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgPC92LWxheW91dD5cclxuICAgICAgICA8di1sYXlvdXQgcm93XHJcbiAgICAgICAgICAgICAgICAgIHdyYXA+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di1zd2l0Y2ggOmxhYmVsPVwiYGRpc2FibGVkYFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiZGlzYWJsZWRcIj48L3Ytc3dpdGNoPlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di1zd2l0Y2ggOmxhYmVsPVwiYHByZXZlbnRXaGl0ZVNwYWNlYFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwicHJldmVudFdoaXRlU3BhY2VcIj48L3Ytc3dpdGNoPlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di1zd2l0Y2ggOmxhYmVsPVwiYHJldmVyc2VTY3JvbGxUb1pvb21gXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJyZXZlcnNlU2Nyb2xsVG9ab29tXCI+PC92LXN3aXRjaD5cclxuICAgICAgICAgIDwvdi1mbGV4PlxyXG4gICAgICAgIDwvdi1sYXlvdXQ+XHJcbiAgICAgICAgPHYtbGF5b3V0IHJvd1xyXG4gICAgICAgICAgICAgICAgICB3cmFwPlxyXG4gICAgICAgICAgPHYtZmxleCBtZDRcclxuICAgICAgICAgICAgICAgICAgeHMxMj5cclxuICAgICAgICAgICAgPHYtc3dpdGNoIDpsYWJlbD1cImBzaG93UmVtb3ZlQnV0dG9uYFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2hvd1JlbW92ZUJ1dHRvblwiPjwvdi1zd2l0Y2g+XHJcbiAgICAgICAgICA8L3YtZmxleD5cclxuICAgICAgICAgIDx2LWZsZXggbWQ0XHJcbiAgICAgICAgICAgICAgICAgIHhzMTI+XHJcbiAgICAgICAgICAgIDx2LXNlbGVjdCA6aXRlbXM9XCJbJ3JlZCcsICdibGFjaycsICdwdXJwbGUnLCAnI2ZmYzEwNycsICdyZ2IoMCwgMTUwLCAxMzYpJ11cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInJlbW92ZUJ1dHRvbkNvbG9yXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwicmVtb3ZlQnV0dG9uQ29sb3JcIj48L3Ytc2VsZWN0PlxyXG4gICAgICAgICAgPC92LWZsZXg+XHJcbiAgICAgICAgICA8di1mbGV4IG1kNFxyXG4gICAgICAgICAgICAgICAgICB4czEyPlxyXG4gICAgICAgICAgICA8di10ZXh0LWZpZWxkIG5hbWU9XCJyZW1vdmVCdXR0b25TaXplXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cInJlbW92ZUJ1dHRvblNpemUgKHB4KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInJlbW92ZUJ1dHRvblNpemVcIj48L3YtdGV4dC1maWVsZD5cclxuICAgICAgICAgIDwvdi1mbGV4PlxyXG4gICAgICAgIDwvdi1sYXlvdXQ+XHJcbiAgICAgICAgPHYtYnRuIGJsb2NrXHJcbiAgICAgICAgICAgICAgIHNlY29uZGFyeVxyXG4gICAgICAgICAgICAgICBsYXJnZVxyXG4gICAgICAgICAgICAgICBkYXJrXHJcbiAgICAgICAgICAgICAgIHRvPVwiL2N1c3RvbWl6YXRpb25cIlxyXG4gICAgICAgICAgICAgICByb3V0ZXI+TW9yZSBDdXN0b21pemF0aW9uczwvdi1idG4+XHJcbiAgICAgICAgPGJyPlxyXG4gICAgICA8L3YtZmxleD5cclxuICAgIDwvdi1sYXlvdXQ+XHJcbiAgXHJcbiAgICA8YnI+XHJcbiAgICA8cHJlIHYtaGlnaGxpZ2h0anM9XCJjb2RlXCI+PGNvZGUgY2xhc3M9XCJodG1sXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAxNnB4XCI+PC9jb2RlPjwvcHJlPlxyXG4gICAgPGRpdiBjbGFzcz1cImhlYWRsaW5lXCI+QnJvd3NlciBTdXBwb3J0PC9kaXY+XHJcbiAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPlxyXG4gICAgPHVsIGNsYXNzPVwiYnMtbGlzdCBwdC0yXCI+XHJcbiAgICAgIDxsaT5JRSAxMCs8L2xpPlxyXG4gICAgICA8bGk+RmlyZWZveCAzLjYrPC9saT5cclxuICAgICAgPGxpPkNocm9tZSA2KzwvbGk+XHJcbiAgICAgIDxsaT5TYWZhcmkgNis8L2xpPlxyXG4gICAgICA8bGk+T3BlcmEgMTEuNSs8L2xpPlxyXG4gICAgICA8bGk+aU9TIFNhZmFyaSA2LjErPC9saT5cclxuICAgICAgPGxpPkFuZHJvaWQgQnJvd3NlciAzKzwvbGk+XHJcbiAgICA8L3VsPlxyXG4gICAgPGJyPlxyXG4gICAgPGRpdiBjbGFzcz1cImhlYWRsaW5lXCI+TGljZW5zZTwvZGl2PlxyXG4gICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj5cclxuICAgIDxwIGNsYXNzPVwicHQtMlwiPklTQyBMaWNlbnNlIChJU0MpXHJcbiAgICAgIDxicj4gQ29weXJpZ2h0IDIwMTcgQ2hyaXMgQ2hhbjwvcD5cclxuICBcclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgZGF0YSAoKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbXlDcm9wcGE6IHt9LFxyXG4gICAgICAgIHdpZHRoOiAzNTAsXHJcbiAgICAgICAgaGVpZ2h0OiAzNTAsXHJcbiAgICAgICAgY2FudmFzQ29sb3I6ICcnLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnQ2hvb3NlIGFuIGltYWdlJyxcclxuICAgICAgICBwbGFjZWhvbGRlckZvbnRTaXplOiAwLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyQ29sb3I6ICcnLFxyXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgICAgICBwcmV2ZW50V2hpdGVTcGFjZTogZmFsc2UsXHJcbiAgICAgICAgZGlzYWJsZVBpbmNoVG9ab29tOiBmYWxzZSxcclxuICAgICAgICByZXZlcnNlU2Nyb2xsVG9ab29tOiBmYWxzZSxcclxuICAgICAgICBzaG93UmVtb3ZlQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgIHJlbW92ZUJ1dHRvbkNvbG9yOiAncmVkJyxcclxuICAgICAgICByZW1vdmVCdXR0b25TaXplOiAwLFxyXG4gICAgICAgIHdpdGhJbml0aWFsSW1hZ2U6IGZhbHNlLFxyXG4gICAgICAgIGluaXRpYWxJbWFnZVNyYzogJ2h0dHBzOi8vemhhbnppeWFuZy5naXRodWIuaW8vdnVlLWNyb3BwYS9zdGF0aWMvaW5pdGlhbC1pbWFnZS5wbmcnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY29tcHV0ZWQ6IHtcclxuICAgICAgY29kZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcXFxyXG4gIDwhLS0gU3luYyB3aXRoIHlvdXIgY3VzdG9taXphdGlvbnMgYWJvdmUhIC0tPlxyXG4gIDxjcm9wcGEgdi1tb2RlbD1cIm15Q3JvcHBhXCJcclxuICAgICAgICAgIDp3aWR0aD1cIiR7dGhpcy53aWR0aH1cIlxyXG4gICAgICAgICAgOmhlaWdodD1cIiR7dGhpcy5oZWlnaHR9XCJcclxuICAgICAgICAgIGNhbnZhcy1jb2xvcj1cIiR7dGhpcy5jYW52YXNDb2xvcn1cIlxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCIke3RoaXMucGxhY2Vob2xkZXJ9XCJcclxuICAgICAgICAgIDpwbGFjZWhvbGRlci1mb250LXNpemU9XCIke3RoaXMucGxhY2Vob2xkZXJGb250U2l6ZX1cIlxyXG4gICAgICAgICAgcGxhY2Vob2xkZXItY29sb3I9XCIke3RoaXMucGxhY2Vob2xkZXJDb2xvcn1cIlxyXG4gICAgICAgICAgOmRpc2FibGVkPVwiJHt0aGlzLmRpc2FibGVkfVwiXHJcbiAgICAgICAgICA6cHJldmVudC13aGl0ZS1zcGFjZT1cIiR7dGhpcy5wcmV2ZW50V2hpdGVTcGFjZX1cIlxyXG4gICAgICAgICAgOnJldmVyc2Utc2Nyb2xsLXRvLXpvb209XCIke3RoaXMucmV2ZXJzZVNjcm9sbFRvWm9vbX1cIlxyXG4gICAgICAgICAgOnNob3ctcmVtb3ZlLWJ1dHRvbj1cIiR7dGhpcy5zaG93UmVtb3ZlQnV0dG9ufVwiXHJcbiAgICAgICAgICByZW1vdmUtYnV0dG9uLWNvbG9yPVwiJHt0aGlzLnJlbW92ZUJ1dHRvbkNvbG9yfVwiXHJcbiAgICAgICAgICA6cmVtb3ZlLWJ1dHRvbi1zaXplPVwiJHt0aGlzLnJlbW92ZUJ1dHRvblNpemV9XCJcclxuICAgICAgICAgIEBmaWxlLWNob29zZT1cImhhbmRsZUNyb3BwYUZpbGVDaG9vc2VcIlxyXG4gICAgICAgICAgQGZpbGUtc2l6ZS1leGNlZWQ9XCJoYW5kbGVDcm9wcGFGaWxlU2l6ZUV4Y2VlZFwiXHJcbiAgICAgICAgICBAZmlsZS10eXBlLW1pc21hdGNoPVwiaGFuZGxlQ3JvcHBhRmlsZVR5cGVNaXNtYXRjaFwiXHJcbiAgICAgICAgICBAaW1hZ2UtcmVtb3ZlPVwiaGFuZGxlSW1hZ2VSZW1vdmVcIlxyXG4gICAgICAgICAgQG1vdmU9XCJoYW5kbGVDcm9wcGFNb3ZlXCJcclxuICAgICAgICAgIEB6b29tPVwiaGFuZGxlQ3JvcHBhWm9vbVwiPlxcXHJcbiAgICAke3RoaXMud2l0aEluaXRpYWxJbWFnZSA/IGBcclxuICAgIDxpbWcgY3Jvc3NPcmlnaW49XCJhbm9ueW1vdXNcIlxyXG4gICAgICAgICBzcmM9XCIke3RoaXMuaW5pdGlhbEltYWdlU3JjfVwiXHJcbiAgICAgICAgIHNsb3Q9XCJpbml0aWFsXCI+YCA6ICcnXHJcbiAgICAgICAgICB9XHJcbiAgPC9jcm9wcGEgPiBgXHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgYmVmb3JlTW91bnQgKCkge1xyXG4gICAgICBsZXQgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxyXG4gICAgICBpZiAod2luZG93V2lkdGggPCA0MDApIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gMjUwXHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAyNTBcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBtb3VudGVkICgpIHtcclxuICAgICAgdGhpcy5wcmVsb2FkKCdodHRwczovL3poYW56aXlhbmcuZ2l0aHViLmlvL3Z1ZS1jcm9wcGEvc3RhdGljL2luaXRpYWwtaW1hZ2UucG5nJylcclxuICAgICAgdGhpcy5wcmVsb2FkKCdodHRwczovL3Vuc3BsYXNoLml0LzQwMC80MDAnKVxyXG4gICAgICB0aGlzLnByZWxvYWQoJ2h0dHBzOi8vdW5zcGxhc2guaXQvNjAwLzUwMCcpXHJcbiAgICB9LFxyXG5cclxuICAgIHdhdGNoOiB7XHJcbiAgICAgIHdpdGhJbml0aWFsSW1hZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnJlZnJlc2goKVxyXG4gICAgICB9LFxyXG4gICAgICBpbml0aWFsSW1hZ2VTcmM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnJlZnJlc2goKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgcHJlbG9hZCAoc3JjKSB7XHJcbiAgICAgICAgbmV3IEltYWdlKCkuc3JjID0gc3JjXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXREYXRhVXJsICgpIHtcclxuICAgICAgICBhbGVydCh0aGlzLm15Q3JvcHBhLmdlbmVyYXRlRGF0YVVybCgpKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgYXN5bmMgcHJpbnRCbG9iICgpIHtcclxuICAgICAgICBsZXQgYmxvYiA9IGF3YWl0IHRoaXMubXlDcm9wcGEucHJvbWlzZWRCbG9iKClcclxuICAgICAgICBjb25zb2xlLmxvZyhibG9iKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgcmVmcmVzaCAoKSB7XHJcbiAgICAgICAgdGhpcy5teUNyb3BwYS5yZWZyZXNoKClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlbW92ZSAoKSB7XHJcbiAgICAgICAgdGhpcy5teUNyb3BwYS5yZW1vdmUoKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgem9vbUluICgpIHtcclxuICAgICAgICB0aGlzLm15Q3JvcHBhLnpvb21JbigpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjaG9vc2VGaWxlICgpIHtcclxuICAgICAgICB0aGlzLm15Q3JvcHBhLmNob29zZUZpbGUoKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgbW92ZVVwICgpIHtcclxuICAgICAgICB0aGlzLm15Q3JvcHBhLm1vdmVVcHdhcmRzKDUpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBoYW5kbGVDcm9wcGFJbml0ICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnaW5pdCcpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBoYW5kbGVDcm9wcGFGaWxlQ2hvb3NlIChmaWxlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2ZpbGUgY2hvc2UnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGUpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBoYW5kbGVDcm9wcGFGaWxlU2l6ZUV4Y2VlZCAoZmlsZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWxlIHNpemUgZXhjZWVkZWQnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGUpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBoYW5kbGVDcm9wcGFGaWxlVHlwZU1pc21hdGNoIChmaWxlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2ZpbGUgdHlwZSBtaXNtYXRjaCcpXHJcbiAgICAgICAgY29uc29sZS5sb2coZmlsZSlcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGhhbmRsZUltYWdlUmVtb3ZlICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnaW1hZ2UgcmVtb3ZlZCcpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBoYW5kbGVDcm9wcGFNb3ZlICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnbW92ZWQnKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgaGFuZGxlQ3JvcHBhWm9vbSAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3pvb21lZCcpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBvbklucHV0ICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnc2RqZmsnKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuPC9zY3JpcHQ+XHJcblxyXG5cclxuPHN0eWxlIGxhbmc9XCJzdHlsdXNcIiBzY29wZWQ+XHJcbiAgQGZvbnQtZmFjZSB7XHJcbiAgICBmb250LWZhbWlseTogJ0JsYWNrIE9wcyBPbmUnO1xyXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIHNyYzogbG9jYWwoJ0JsYWNrIE9wcyBPbmUnKSwgbG9jYWwoJ0JsYWNrT3BzT25lLVJlZ3VsYXInKSwgdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9ibGFja29wc29uZS92Ny8yWFctRG1Ec0diRExFMzcyS3JNVzFUeE9idHc3My1xUWdicjdCZTUxdjVjLndvZmYyKSBmb3JtYXQoJ3dvZmYyJyk7XHJcbiAgICB1bmljb2RlLXJhbmdlOiBVKzAwMDAtMDBGRiwgVSswMTMxLCBVKzAxNTItMDE1MywgVSswMkM2LCBVKzAyREEsIFUrMDJEQywgVSsyMDAwLTIwNkYsIFUrMjA3NCwgVSsyMEFDLCBVKzIyMTIsIFUrMjIxNTtcclxuICB9XHJcbiAgaDJcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyXHJcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweClcclxuICAgICAgcGFkZGluZy1ib3R0b206IDFweFxyXG4gICAgICBtYXJnaW4tYm90dG9tOiA0cHhcclxuICAgIHNwYW4uaGVhZGVyXHJcbiAgICAgIGZvbnQtZmFtaWx5OiAnQmxhY2sgT3BzIE9uZScsIGN1cnNpdmVcclxuICAgIHNwYW4uaGVhZGVyOmZpcnN0LWNoaWxkXHJcbiAgICAgIGNvbG9yOiAjNDFiODgzXHJcbiAgICBzcGFuLmhlYWRlcjpudGgtY2hpbGQoMilcclxuICAgICAgY29sb3I6ICMzNTQ5NWVcclxuICAgIGltZ1xyXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGVcclxuICAgICAgcmlnaHQ6IDEycHhcclxuICAgICAgd2lkdGg6IDYwcHhcclxuICAgICAgYm90dG9tOiAwcHhcclxuICAgICAgdHJhbnNpdGlvbjogYWxsIC4zc1xyXG4gICAgICAmOmhvdmVyXHJcbiAgICAgICAgb3BhY2l0eTogLjdcclxuICAuc3ViaGVhZGVyXHJcbiAgICBwYWRkaW5nOiAwXHJcbiAgICBmb250LXNpemU6IDIwcHhcclxuICAgIG1hcmdpbjogMTBweCAwXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXJcclxuICAgIGRpc3BsYXk6IGJsb2NrXHJcbiAgICBoZWlnaHQ6IGF1dG9cclxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KVxyXG4gICAgICBmb250LXNpemU6IDE0cHhcclxuICAgICAgbWFyZ2luOiA0cHggMFxyXG4gIC5jcm9wcGEtY29udGFpbmVyXHJcbiAgICBmbG9hdDogcmlnaHRcclxuICAuY2FyZC50cnktb3V0XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzU0OTVlICFpbXBvcnRhbnQ7XHJcbjwvc3R5bGU+XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBpbmRleC52dWU/M2VlMTI4M2QiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 225:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(231);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/MWU2ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 229:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n@font-face {\\n  font-family: 'Black Ops One';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Black Ops One'), local('BlackOpsOne-Regular'), url(\\\"https://fonts.gstatic.com/s/blackopsone/v7/2XW-DmDsGbDLE372KrMW1TxObtw73-qQgbr7Be51v5c.woff2\\\") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;\\n}\\nh2[data-v-98168054] {\\n  position: relative;\\n  text-align: center;\\n}\\n@media screen and (max-width: 600px) {\\nh2[data-v-98168054] {\\n    padding-bottom: 1px;\\n    margin-bottom: 4px;\\n}\\n}\\nh2 span.header[data-v-98168054] {\\n  font-family: 'Black Ops One', cursive;\\n}\\nh2 span.header[data-v-98168054]:first-child {\\n  color: #41b883;\\n}\\nh2 span.header[data-v-98168054]:nth-child(2) {\\n  color: #35495e;\\n}\\nh2 img[data-v-98168054] {\\n  position: absolute;\\n  right: 12px;\\n  width: 60px;\\n  bottom: 0px;\\n  transition: all 0.3s;\\n}\\nh2 img[data-v-98168054]:hover {\\n  opacity: 0.7;\\n}\\n.subheader[data-v-98168054] {\\n  padding: 0;\\n  font-size: 20px;\\n  margin: 10px 0;\\n  text-align: center;\\n  display: block;\\n  height: auto;\\n}\\n@media screen and (max-width: 600px) {\\n.subheader[data-v-98168054] {\\n    font-size: 14px;\\n    margin: 4px 0;\\n}\\n}\\n.croppa-container[data-v-98168054] {\\n  float: right;\\n}\\n.card.try-out[data-v-98168054] {\\n  background-color: #35495e !important;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/pages/src/pages/index.vue\",\"/./src/pages/index.vue\"],\"names\":[],\"mappings\":\";AA0YA;EACE,6BAAA;EACA,mBAAA;EACA,iBAAA;EACA,+KAAA;EACA,qHAAA;CCzYD;AD2YD;EACE,mBAAA;EACA,mBAAA;CCzYD;AD0YoC;AAAA;IACjC,oBAAA;IACA,mBAAA;CCvYD;CACF;ADuYC;EACE,sCAAA;CCrYH;ADsYC;EACE,eAAA;CCpYH;ADqYC;EACE,eAAA;CCnYH;ADoYC;EACE,mBAAA;EACA,YAAA;EACA,YAAA;EACA,YAAA;EACA,qBAAA;CClYH;ADmYG;EACE,aAAA;CCjYL;ADkYD;EACE,WAAA;EACA,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,eAAA;EACA,aAAA;CChYD;ADiYoC;AAAA;IACjC,gBAAA;IACA,cAAA;CC9XD;CACF;AD8XD;EACE,aAAA;CC5XD;AD6XD;EACE,qCAAA;CC3XD\",\"file\":\"index.vue\",\"sourcesContent\":[\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n@font-face {\\n  font-family: 'Black Ops One';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Black Ops One'), local('BlackOpsOne-Regular'), url(https://fonts.gstatic.com/s/blackopsone/v7/2XW-DmDsGbDLE372KrMW1TxObtw73-qQgbr7Be51v5c.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;\\n}\\nh2\\n  position: relative\\n  text-align: center\\n  @media screen and (max-width: 600px)\\n    padding-bottom: 1px\\n    margin-bottom: 4px\\n  span.header\\n    font-family: 'Black Ops One', cursive\\n  span.header:first-child\\n    color: #41b883\\n  span.header:nth-child(2)\\n    color: #35495e\\n  img\\n    position: absolute\\n    right: 12px\\n    width: 60px\\n    bottom: 0px\\n    transition: all .3s\\n    &:hover\\n      opacity: .7\\n.subheader\\n  padding: 0\\n  font-size: 20px\\n  margin: 10px 0\\n  text-align: center\\n  display: block\\n  height: auto\\n  @media screen and (max-width: 600px)\\n    font-size: 14px\\n    margin: 4px 0\\n.croppa-container\\n  float: right\\n.card.try-out\\n  background-color: #35495e !important;\\n\",\"@font-face {\\n  font-family: 'Black Ops One';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Black Ops One'), local('BlackOpsOne-Regular'), url(\\\"https://fonts.gstatic.com/s/blackopsone/v7/2XW-DmDsGbDLE372KrMW1TxObtw73-qQgbr7Be51v5c.woff2\\\") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;\\n}\\nh2 {\\n  position: relative;\\n  text-align: center;\\n}\\n@media screen and (max-width: 600px) {\\n  h2 {\\n    padding-bottom: 1px;\\n    margin-bottom: 4px;\\n  }\\n}\\nh2 span.header {\\n  font-family: 'Black Ops One', cursive;\\n}\\nh2 span.header:first-child {\\n  color: #41b883;\\n}\\nh2 span.header:nth-child(2) {\\n  color: #35495e;\\n}\\nh2 img {\\n  position: absolute;\\n  right: 12px;\\n  width: 60px;\\n  bottom: 0px;\\n  transition: all 0.3s;\\n}\\nh2 img:hover {\\n  opacity: 0.7;\\n}\\n.subheader {\\n  padding: 0;\\n  font-size: 20px;\\n  margin: 10px 0;\\n  text-align: center;\\n  display: block;\\n  height: auto;\\n}\\n@media screen and (max-width: 600px) {\\n  .subheader {\\n    font-size: 14px;\\n    margin: 4px 0;\\n  }\\n}\\n.croppa-container {\\n  float: right;\\n}\\n.card.try-out {\\n  background-color: #35495e !important;\\n}\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 231:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(232);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanM/ZGI0MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBIiwiZmlsZSI6IjIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9XG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpcztcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 232:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 253:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"index\"\n    }\n  }, [_vm._m(0), _vm._v(\" \"), _c('div', {\n    staticClass: \"text-xs-center\"\n  }, [_vm._m(1), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('v-chip', {\n    staticClass: \"orange white--text\"\n  }, [_vm._v(\"\\n      What You See Is What You Get\\n      \"), _c('v-icon', {\n    attrs: {\n      \"right\": \"\"\n    }\n  }, [_vm._v(\"star\")])], 1), _vm._v(\" \"), _c('v-chip', {\n    staticClass: \"orange white--text\"\n  }, [_vm._v(\"\\n      24kb In Total\\n      \"), _c('v-icon', {\n    attrs: {\n      \"right\": \"\"\n    }\n  }, [_vm._v(\"star\")])], 1), _vm._v(\" \"), _c('v-chip', {\n    staticClass: \"orange white--text\"\n  }, [_vm._v(\"\\n      Hightly Customizable\\n      \"), _c('v-icon', {\n    attrs: {\n      \"right\": \"\"\n    }\n  }, [_vm._v(\"star\")])], 1), _vm._v(\" \"), _c('v-chip', {\n    staticClass: \"orange white--text\"\n  }, [_vm._v(\"\\n      Mobile Friendly\\n      \"), _c('v-icon', {\n    attrs: {\n      \"right\": \"\"\n    }\n  }, [_vm._v(\"star\")])], 1)], 1), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('v-card', {\n    staticClass: \"white--text try-out\"\n  }, [_c('v-container', {\n    attrs: {\n      \"fluid\": \"\",\n      \"grid-list-lg\": \"\"\n    }\n  }, [_c('v-layout', {\n    attrs: {\n      \"row-md\": \"\",\n      \"column\": \"\"\n    }\n  }, [_c('v-flex', {\n    attrs: {\n      \"md4\": \"\"\n    }\n  }, [_c('div', [_c('p', {\n    staticClass: \"tip\"\n  }, [_c('i', {\n    staticClass: \"headline iconfont icon-pc\"\n  }, [_vm._v(\" on comptuters\")])]), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Drag and drop a file\")]), _vm._v(\" \"), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Click to choose a file\")]), _vm._v(\" \"), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Drag to move\")]), _vm._v(\" \"), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Scroll to zoom\")]), _vm._v(\" \"), _c('p'), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('p', {\n    staticClass: \"tip\"\n  }, [_c('i', {\n    staticClass: \"headline iconfont icon-mobile\"\n  }, [_vm._v(\" on mobile devices\")])]), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Tab to choose a file\")]), _vm._v(\" \"), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Drag to move\")]), _vm._v(\" \"), _c('li', {\n    staticClass: \"subheading\"\n  }, [_vm._v(\"Pinch with two fingers to zoom\")]), _vm._v(\" \"), _c('p')])]), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md8\": \"\"\n    }\n  }, [_c('croppa', {\n    attrs: {\n      \"width\": +_vm.width,\n      \"height\": +_vm.height,\n      \"canvas-color\": _vm.canvasColor,\n      \"placeholder\": _vm.placeholder,\n      \"placeholder-font-size\": +_vm.placeholderFontSize,\n      \"placeholder-color\": _vm.placeholderColor,\n      \"disabled\": _vm.disabled,\n      \"prevent-white-space\": _vm.preventWhiteSpace,\n      \"reverse-scroll-to-zoom\": _vm.reverseScrollToZoom,\n      \"show-remove-button\": _vm.showRemoveButton,\n      \"remove-button-color\": _vm.removeButtonColor,\n      \"remove-button-size\": +_vm.removeButtonSize\n    },\n    on: {\n      \"file-choose\": _vm.handleCroppaFileChoose,\n      \"file-size-exceed\": _vm.handleCroppaFileSizeExceed,\n      \"file-type-mismatch\": _vm.handleCroppaFileTypeMismatch,\n      \"image-remove\": _vm.handleImageRemove,\n      \"move\": _vm.handleCroppaMove,\n      \"zoom\": _vm.handleCroppaZoom\n    },\n    model: {\n      value: (_vm.myCroppa),\n      callback: function($$v) {\n        _vm.myCroppa = $$v\n      },\n      expression: \"myCroppa\"\n    }\n  }, [(_vm.withInitialImage) ? _c('img', {\n    attrs: {\n      \"crossOrigin\": \"anonymous\",\n      \"src\": _vm.initialImageSrc\n    },\n    slot: \"initial\"\n  }) : _vm._e()])], 1)], 1)], 1)], 1), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('v-layout', [_c('v-flex', {\n    attrs: {\n      \"xs12\": \"\",\n      \"order-md1\": \"\"\n    }\n  }, [_c('v-layout', {\n    attrs: {\n      \"row\": \"\",\n      \"wrap\": \"\"\n    }\n  }, [_c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-slider', {\n    attrs: {\n      \"label\": \"width\",\n      \"thumb-label\": \"\",\n      \"max\": 500,\n      \"min\": 100\n    },\n    model: {\n      value: (_vm.width),\n      callback: function($$v) {\n        _vm.width = $$v\n      },\n      expression: \"width\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-slider', {\n    attrs: {\n      \"label\": \"height\",\n      \"thumb-label\": \"\",\n      \"max\": 500,\n      \"min\": 100\n    },\n    model: {\n      value: (_vm.height),\n      callback: function($$v) {\n        _vm.height = $$v\n      },\n      expression: \"height\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-select', {\n    attrs: {\n      \"items\": ['', 'black', 'grey', '#00bcd4', 'rgb(205, 220, 57)'],\n      \"label\": \"canvasColor\"\n    },\n    on: {\n      \"input\": _vm.onInput\n    },\n    model: {\n      value: (_vm.canvasColor),\n      callback: function($$v) {\n        _vm.canvasColor = $$v\n      },\n      expression: \"canvasColor\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('v-layout', {\n    attrs: {\n      \"row\": \"\",\n      \"wrap\": \"\"\n    }\n  }, [_c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-switch', {\n    attrs: {\n      \"label\": \"set initial image\"\n    },\n    model: {\n      value: (_vm.withInitialImage),\n      callback: function($$v) {\n        _vm.withInitialImage = $$v\n      },\n      expression: \"withInitialImage\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md8\": \"\"\n    }\n  }, [_c('v-text-field', {\n    attrs: {\n      \"name\": \"initialImageSrc\",\n      \"label\": \"initial image url\"\n    },\n    model: {\n      value: (_vm.initialImageSrc),\n      callback: function($$v) {\n        _vm.initialImageSrc = $$v\n      },\n      expression: \"initialImageSrc\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('v-layout', {\n    attrs: {\n      \"row\": \"\",\n      \"wrap\": \"\"\n    }\n  }, [_c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-text-field', {\n    attrs: {\n      \"name\": \"placeholder\",\n      \"label\": \"placeholder\"\n    },\n    model: {\n      value: (_vm.placeholder),\n      callback: function($$v) {\n        _vm.placeholder = $$v\n      },\n      expression: \"placeholder\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-text-field', {\n    attrs: {\n      \"name\": \"placeholderFontSize\",\n      \"label\": \"placeholderFontSize (px)\",\n      \"type\": \"number\"\n    },\n    model: {\n      value: (_vm.placeholderFontSize),\n      callback: function($$v) {\n        _vm.placeholderFontSize = $$v\n      },\n      expression: \"placeholderFontSize\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-select', {\n    attrs: {\n      \"items\": ['', 'white', 'grey', '#ffc107', 'rgb(0, 150, 136)'],\n      \"label\": \"placeholderColor\"\n    },\n    model: {\n      value: (_vm.placeholderColor),\n      callback: function($$v) {\n        _vm.placeholderColor = $$v\n      },\n      expression: \"placeholderColor\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('v-layout', {\n    attrs: {\n      \"row\": \"\",\n      \"wrap\": \"\"\n    }\n  }, [_c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-switch', {\n    attrs: {\n      \"label\": \"disabled\"\n    },\n    model: {\n      value: (_vm.disabled),\n      callback: function($$v) {\n        _vm.disabled = $$v\n      },\n      expression: \"disabled\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-switch', {\n    attrs: {\n      \"label\": \"preventWhiteSpace\"\n    },\n    model: {\n      value: (_vm.preventWhiteSpace),\n      callback: function($$v) {\n        _vm.preventWhiteSpace = $$v\n      },\n      expression: \"preventWhiteSpace\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-switch', {\n    attrs: {\n      \"label\": \"reverseScrollToZoom\"\n    },\n    model: {\n      value: (_vm.reverseScrollToZoom),\n      callback: function($$v) {\n        _vm.reverseScrollToZoom = $$v\n      },\n      expression: \"reverseScrollToZoom\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('v-layout', {\n    attrs: {\n      \"row\": \"\",\n      \"wrap\": \"\"\n    }\n  }, [_c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-switch', {\n    attrs: {\n      \"label\": \"showRemoveButton\"\n    },\n    model: {\n      value: (_vm.showRemoveButton),\n      callback: function($$v) {\n        _vm.showRemoveButton = $$v\n      },\n      expression: \"showRemoveButton\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-select', {\n    attrs: {\n      \"items\": ['red', 'black', 'purple', '#ffc107', 'rgb(0, 150, 136)'],\n      \"label\": \"removeButtonColor\"\n    },\n    model: {\n      value: (_vm.removeButtonColor),\n      callback: function($$v) {\n        _vm.removeButtonColor = $$v\n      },\n      expression: \"removeButtonColor\"\n    }\n  })], 1), _vm._v(\" \"), _c('v-flex', {\n    attrs: {\n      \"md4\": \"\",\n      \"xs12\": \"\"\n    }\n  }, [_c('v-text-field', {\n    attrs: {\n      \"name\": \"removeButtonSize\",\n      \"label\": \"removeButtonSize (px)\",\n      \"type\": \"number\"\n    },\n    model: {\n      value: (_vm.removeButtonSize),\n      callback: function($$v) {\n        _vm.removeButtonSize = $$v\n      },\n      expression: \"removeButtonSize\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('v-btn', {\n    attrs: {\n      \"block\": \"\",\n      \"secondary\": \"\",\n      \"large\": \"\",\n      \"dark\": \"\",\n      \"to\": \"/customization\",\n      \"router\": \"\"\n    }\n  }, [_vm._v(\"More Customizations\")]), _vm._v(\" \"), _c('br')], 1)], 1), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('pre', {\n    directives: [{\n      name: \"highlightjs\",\n      rawName: \"v-highlightjs\",\n      value: (_vm.code),\n      expression: \"code\"\n    }]\n  }, [_c('code', {\n    staticClass: \"html\",\n    staticStyle: {\n      \"margin-bottom\": \"16px\"\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"headline\"\n  }, [_vm._v(\"Browser Support\")]), _vm._v(\" \"), _c('v-divider'), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('div', {\n    staticClass: \"headline\"\n  }, [_vm._v(\"License\")]), _vm._v(\" \"), _c('v-divider'), _vm._v(\" \"), _vm._m(4)], 1)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('h2', [_c('span', {\n    staticClass: \"header\"\n  }, [_vm._v(\"Vue\")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"header\"\n  }, [_vm._v(\"Croppa\")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"subheader\"\n  }, [_vm._v(\"A simple straightforward customizable lightweight mobile-friendly image cropper for Vue 2.0.\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('video', {\n    staticClass: \"post video-post\",\n    staticStyle: {\n      \"width\": \"524px\",\n      \"height\": \"413.96px\"\n    },\n    attrs: {\n      \"id\": \"video-element\",\n      \"autoplay\": \"\",\n      \"loop\": \"\",\n      \"poster\": \"https://i.imgur.com/YhWLgqLh.jpg\",\n      \"preload\": \"auto\",\n      \"muted\": \"muted\",\n      \"webkit-playsinline\": \"\"\n    }\n  }, [_c('source', {\n    attrs: {\n      \"type\": \"video/mp4\",\n      \"src\": \"https://i.imgur.com/vO1FgQM.mp4\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('video', {\n    staticClass: \"post video-post\",\n    staticStyle: {\n      \"height\": \"413.96px\"\n    },\n    attrs: {\n      \"id\": \"video-element\",\n      \"autoplay\": \"\",\n      \"loop\": \"\",\n      \"poster\": \"https://i.imgur.com/sJAQPo7h.jpg\",\n      \"preload\": \"auto\",\n      \"muted\": \"muted\",\n      \"webkit-playsinline\": \"\"\n    }\n  }, [_c('source', {\n    attrs: {\n      \"type\": \"video/mp4\",\n      \"src\": \"https://i.imgur.com/sJAQPo7.mp4\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('ul', {\n    staticClass: \"bs-list pt-2\"\n  }, [_c('li', [_vm._v(\"IE 10+\")]), _vm._v(\" \"), _c('li', [_vm._v(\"Firefox 3.6+\")]), _vm._v(\" \"), _c('li', [_vm._v(\"Chrome 6+\")]), _vm._v(\" \"), _c('li', [_vm._v(\"Safari 6+\")]), _vm._v(\" \"), _c('li', [_vm._v(\"Opera 11.5+\")]), _vm._v(\" \"), _c('li', [_vm._v(\"iOS Safari 6.1+\")]), _vm._v(\" \"), _c('li', [_vm._v(\"Android Browser 3+\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"pt-2\"\n  }, [_vm._v(\"ISC License (ISC)\\n    \"), _c('br'), _vm._v(\" Copyright 2017 Chris Chan\")])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-98168054\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 261:
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(229);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(9)(\"43f5cb35\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-98168054\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/stylus-loader/index.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-98168054\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/stylus-loader/index.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaW5kZXgudnVlPzc0OWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBdU47QUFDdk47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9JQUFvSSxrRkFBa0Y7QUFDdE4sNklBQTZJLGtGQUFrRjtBQUMvTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjI2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05ODE2ODA1NFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9pbmRleC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjQzZjVjYjM1XCIsIGNvbnRlbnQsIGZhbHNlKTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTk4MTY4MDU0XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bHVzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2luZGV4LnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05ODE2ODA1NFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9pbmRleC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtOTgxNjgwNTRcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3N0eWx1cy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvcGFnZXMvaW5kZXgudnVlXG4vLyBtb2R1bGUgaWQgPSAyNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ })

});